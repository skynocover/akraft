// Generated by Xata Codegen 0.30.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "services",
    columns: [
      { name: "description", type: "text" },
      { name: "name", type: "string" },
      { name: "forbidContents", type: "multiple" },
      { name: "visible", type: "bool" },
      { name: "auth", type: "json" },
      { name: "topLinks", type: "json", notNull: true, defaultValue: "[]" },
      { name: "headLinks", type: "json", notNull: true, defaultValue: "[]" },
      { name: "ownerId", type: "text" },
      { name: "blockedIPs", type: "multiple" },
    ],
  },
  {
    name: "threads",
    columns: [
      { name: "content", type: "text" },
      { name: "image", type: "file" },
      { name: "imageToken", type: "string" },
      { name: "youtubeID", type: "string" },
      { name: "replyAt", type: "datetime" },
      { name: "userId", type: "string" },
      { name: "userIp", type: "string" },
      { name: "title", type: "string", defaultValue: "Untitled" },
      { name: "name", type: "string", defaultValue: "anonymous" },
    ],
    revLinks: [
      { column: "thread", table: "replies" },
      { column: "thread", table: "reports" },
    ],
  },
  {
    name: "replies",
    columns: [
      { name: "content", type: "text" },
      { name: "image", type: "file" },
      { name: "imageToken", type: "string" },
      { name: "youtubeID", type: "string" },
      { name: "sage", type: "bool" },
      { name: "thread", type: "link", link: { table: "threads" } },
      { name: "userId", type: "string" },
      { name: "userIp", type: "string" },
      { name: "name", type: "string", defaultValue: "anonymous" },
    ],
    revLinks: [{ column: "reply", table: "reports" }],
  },
  {
    name: "reports",
    columns: [
      { name: "content", type: "text" },
      { name: "thread", type: "link", link: { table: "threads" } },
      { name: "reply", type: "link", link: { table: "replies" } },
      { name: "userIp", type: "string" },
      { name: "reportedIp", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Services = InferredTypes["services"];
export type ServicesRecord = Services & XataRecord;

export type Threads = InferredTypes["threads"];
export type ThreadsRecord = Threads & XataRecord;

export type Replies = InferredTypes["replies"];
export type RepliesRecord = Replies & XataRecord;

export type Reports = InferredTypes["reports"];
export type ReportsRecord = Reports & XataRecord;

export type DatabaseSchema = {
  services: ServicesRecord;
  threads: ThreadsRecord;
  replies: RepliesRecord;
  reports: ReportsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://EricWu-s-workspace-2lkpjt.eu-central-1.xata.sh/db/akraft",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
